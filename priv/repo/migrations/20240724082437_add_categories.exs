defmodule AshDemo.Repo.Migrations.AddCategories do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:posts) do
      add :category_id, :uuid
    end

    drop constraint(:comments, "comments_post_id_fkey")

    alter table(:comments) do
      modify :post_id,
             references(:posts,
               column: :id,
               name: "comments_post_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all,
               on_update: :update_all
             )
    end

    create table(:categories, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:posts) do
      modify :category_id,
             references(:categories,
               column: :id,
               name: "posts_category_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :nilify_all,
               on_update: :update_all
             )
    end

    create index(:posts, [:category_id])

    alter table(:categories) do
      add :name, :text, null: false
    end

    execute("ALTER TABLE comments alter CONSTRAINT comments_post_id_fkey NOT DEFERRABLE")

    create index(:comments, [:post_id])
  end

  def down do
    drop_if_exists index(:comments, [:post_id])

    alter table(:categories) do
      remove :name
    end

    drop_if_exists index(:posts, [:category_id])

    drop constraint(:posts, "posts_category_id_fkey")

    alter table(:posts) do
      modify :category_id, :uuid
    end

    drop table(:categories)

    drop constraint(:comments, "comments_post_id_fkey")

    alter table(:comments) do
      modify :post_id,
             references(:posts,
               column: :id,
               name: "comments_post_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all,
               on_update: :update_all
             )
    end

    alter table(:posts) do
      remove :category_id
    end
  end
end
